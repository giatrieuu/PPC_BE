// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace PPC.DAO.Models;

public partial class CCPContext : DbContext
{
    public CCPContext()
    {
    }

    public CCPContext(DbContextOptions<CCPContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Account> Accounts { get; set; }

    public virtual DbSet<Answer> Answers { get; set; }

    public virtual DbSet<Booking> Bookings { get; set; }

    public virtual DbSet<BookingSubCategory> BookingSubCategories { get; set; }

    public virtual DbSet<Category> Categories { get; set; }

    public virtual DbSet<Certification> Certifications { get; set; }

    public virtual DbSet<Chapter> Chapters { get; set; }

    public virtual DbSet<Counselor> Counselors { get; set; }

    public virtual DbSet<CounselorSubCategory> CounselorSubCategories { get; set; }

    public virtual DbSet<Couple> Couples { get; set; }

    public virtual DbSet<Course> Courses { get; set; }

    public virtual DbSet<CourseSubCategory> CourseSubCategories { get; set; }

    public virtual DbSet<Deposit> Deposits { get; set; }

    public virtual DbSet<EnrollCourse> EnrollCourses { get; set; }

    public virtual DbSet<Lecture> Lectures { get; set; }

    public virtual DbSet<Member> Members { get; set; }

    public virtual DbSet<MemberMemberShip> MemberMemberShips { get; set; }

    public virtual DbSet<MemberShip> MemberShips { get; set; }

    public virtual DbSet<Notification> Notifications { get; set; }

    public virtual DbSet<PersonType> PersonTypes { get; set; }

    public virtual DbSet<Post> Posts { get; set; }

    public virtual DbSet<Processing> Processings { get; set; }

    public virtual DbSet<Question> Questions { get; set; }

    public virtual DbSet<Quiz> Quizzes { get; set; }

    public virtual DbSet<ResultHistory> ResultHistories { get; set; }

    public virtual DbSet<ResultPersonType> ResultPersonTypes { get; set; }

    public virtual DbSet<SubCategory> SubCategories { get; set; }

    public virtual DbSet<Survey> Surveys { get; set; }

    public virtual DbSet<SysTransaction> SysTransactions { get; set; }

    public virtual DbSet<Wallet> Wallets { get; set; }

    public virtual DbSet<WorkSchedule> WorkSchedules { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlServer("Server=tcp:nguyengiaphong.database.windows.net,1433;user id=giaphong;pwd=Phong209022;Initial Catalog=PPC_Capstone;Encrypt=True;TrustServerCertificate=True");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Account>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Account__3213E83F64BF4DB1");

            entity.ToTable("Account");

            entity.Property(e => e.Id)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.CreateAt)
                .HasColumnType("datetime")
                .HasColumnName("create_at");
            entity.Property(e => e.Email)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("email");
            entity.Property(e => e.Password)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("password");
            entity.Property(e => e.Role).HasColumnName("role");
            entity.Property(e => e.Status).HasColumnName("status");
            entity.Property(e => e.WalletId)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("walletId");

            entity.HasOne(d => d.Wallet).WithMany(p => p.Accounts)
                .HasForeignKey(d => d.WalletId)
                .HasConstraintName("FK__Account__walletI__398D8EEE");
        });

        modelBuilder.Entity<Answer>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Answer__3213E83F10C8DBC6");

            entity.ToTable("Answer");

            entity.Property(e => e.Id)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("createdAt");
            entity.Property(e => e.IsCorrect).HasColumnName("is_correct");
            entity.Property(e => e.QuestionId)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("questionId");
            entity.Property(e => e.Score).HasColumnName("score");
            entity.Property(e => e.Status).HasColumnName("status");
            entity.Property(e => e.Tag)
                .HasMaxLength(255)
                .HasColumnName("tag");
            entity.Property(e => e.Text)
                .HasMaxLength(255)
                .HasColumnName("text");

            entity.HasOne(d => d.Question).WithMany(p => p.Answers)
                .HasForeignKey(d => d.QuestionId)
                .HasConstraintName("FK__Answer__question__4D94879B");
        });

        modelBuilder.Entity<Booking>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Booking__3213E83FB0064113");

            entity.ToTable("Booking");

            entity.Property(e => e.Id)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.CancelReason)
                .HasMaxLength(2000)
                .HasColumnName("cancelReason");
            entity.Property(e => e.CounselorId)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("counselorId");
            entity.Property(e => e.CreateAt)
                .HasColumnType("datetime")
                .HasColumnName("createAt");
            entity.Property(e => e.Feedback)
                .HasMaxLength(2000)
                .HasColumnName("feedback");
            entity.Property(e => e.Guides)
                .HasMaxLength(2000)
                .HasColumnName("guides");
            entity.Property(e => e.IsCouple).HasColumnName("isCouple");
            entity.Property(e => e.IsReport).HasColumnName("isReport");
            entity.Property(e => e.Member2Id)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("member2Id");
            entity.Property(e => e.MemberId)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("memberId");
            entity.Property(e => e.Note)
                .HasMaxLength(2000)
                .HasColumnName("note");
            entity.Property(e => e.Price).HasColumnName("price");
            entity.Property(e => e.ProblemAnalysis)
                .HasMaxLength(2000)
                .HasColumnName("problemAnalysis");
            entity.Property(e => e.ProblemSummary)
                .HasMaxLength(2000)
                .HasColumnName("problemSummary");
            entity.Property(e => e.Rating).HasColumnName("rating");
            entity.Property(e => e.ReportMessage)
                .HasMaxLength(2000)
                .HasColumnName("reportMessage");
            entity.Property(e => e.Status).HasColumnName("status");
            entity.Property(e => e.TimeEnd)
                .HasColumnType("datetime")
                .HasColumnName("timeEnd");
            entity.Property(e => e.TimeStart)
                .HasColumnType("datetime")
                .HasColumnName("timeStart");

            entity.HasOne(d => d.Counselor).WithMany(p => p.Bookings)
                .HasForeignKey(d => d.CounselorId)
                .HasConstraintName("FK__Booking__counsel__7F2BE32F");

            entity.HasOne(d => d.Member2).WithMany(p => p.BookingMember2s)
                .HasForeignKey(d => d.Member2Id)
                .HasConstraintName("FK__Booking__member2__7E37BEF6");

            entity.HasOne(d => d.Member).WithMany(p => p.BookingMembers)
                .HasForeignKey(d => d.MemberId)
                .HasConstraintName("FK__Booking__memberI__7D439ABD");
        });

        modelBuilder.Entity<BookingSubCategory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Booking___3213E83F3E8A2C3B");

            entity.ToTable("Booking_SubCategory");

            entity.Property(e => e.Id)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.BookingId)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("bookingId");
            entity.Property(e => e.CategoryId)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("categoryId");
            entity.Property(e => e.Status).HasColumnName("status");
            entity.Property(e => e.SubCategoryId)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("subCategoryId");

            entity.HasOne(d => d.Booking).WithMany(p => p.BookingSubCategories)
                .HasForeignKey(d => d.BookingId)
                .HasConstraintName("FK__Booking_S__booki__02084FDA");

            entity.HasOne(d => d.SubCategory).WithMany(p => p.BookingSubCategories)
                .HasForeignKey(d => d.SubCategoryId)
                .HasConstraintName("FK__Booking_S__subCa__02FC7413");
        });

        modelBuilder.Entity<Category>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Category__3213E83FB6EE5254");

            entity.ToTable("Category");

            entity.Property(e => e.Id)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .HasColumnName("name");
            entity.Property(e => e.Status).HasColumnName("status");
        });

        modelBuilder.Entity<Certification>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Certific__3213E83F92911757");

            entity.ToTable("Certification");

            entity.Property(e => e.Id)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.CounselorId)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("counselorId");
            entity.Property(e => e.CreateAt)
                .HasColumnType("datetime")
                .HasColumnName("createAt");
            entity.Property(e => e.Description)
                .HasMaxLength(1000)
                .HasColumnName("description");
            entity.Property(e => e.Image)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("image");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .HasColumnName("name");
            entity.Property(e => e.RejectReason)
                .HasMaxLength(1000)
                .HasColumnName("rejectReason");
            entity.Property(e => e.Status).HasColumnName("status");
            entity.Property(e => e.Time)
                .HasColumnType("datetime")
                .HasColumnName("time");

            entity.HasOne(d => d.Counselor).WithMany(p => p.Certifications)
                .HasForeignKey(d => d.CounselorId)
                .HasConstraintName("FK__Certifica__couns__7A672E12");
        });

        modelBuilder.Entity<Chapter>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Chapter__3213E83F6132B212");

            entity.ToTable("Chapter");

            entity.Property(e => e.Id)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.ChapNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("chapNo");
            entity.Property(e => e.ChapNum).HasColumnName("chapNum");
            entity.Property(e => e.ChapterType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("chapterType");
            entity.Property(e => e.CourseId)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("courseId");
            entity.Property(e => e.CreateAt)
                .HasColumnType("datetime")
                .HasColumnName("create_at");
            entity.Property(e => e.Description)
                .HasColumnName("description")
            .HasColumnType("nvarchar(max)");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .HasColumnName("name");
            entity.Property(e => e.Status).HasColumnName("status");

            entity.HasOne(d => d.Course).WithMany(p => p.Chapters)
                .HasForeignKey(d => d.CourseId)
                .HasConstraintName("FK__Chapter__courseI__46E78A0C");
        });

        modelBuilder.Entity<Counselor>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Counselo__3213E83FE5FD825D");

            entity.ToTable("Counselor");

            entity.Property(e => e.Id)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.AccountId)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("accountId");
            entity.Property(e => e.Avatar)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("avatar");
            entity.Property(e => e.Description)
                .HasMaxLength(1000)
                .HasColumnName("description");
            entity.Property(e => e.Fullname)
                .HasMaxLength(255)
                .HasColumnName("fullname");
            entity.Property(e => e.Price).HasColumnName("price");
            entity.Property(e => e.Rating).HasColumnName("rating");
            entity.Property(e => e.Reviews).HasColumnName("reviews");
            entity.Property(e => e.YearOfJob).HasColumnName("yearOfJob");

            entity.Property(e => e.Phone)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("phone");
            entity.Property(e => e.Status).HasColumnName("status");

            entity.HasOne(d => d.Account).WithMany(p => p.Counselors)
                .HasForeignKey(d => d.AccountId)
                .HasConstraintName("FK__Counselor__accou__534D60F1");
        });

        modelBuilder.Entity<CounselorSubCategory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Counselo__3213E83FF57D9047");

            entity.ToTable("Counselor_SubCategory");

            entity.Property(e => e.Id)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.CategoryId)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("categoryId");
            entity.Property(e => e.CertifivationId)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("certifivationId");
            entity.Property(e => e.CounselorId)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("counselorId");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .HasColumnName("name");
            entity.Property(e => e.Status).HasColumnName("status");
            entity.Property(e => e.SubCategoryId)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("subCategoryId");

            entity.HasOne(d => d.Counselor).WithMany(p => p.CounselorSubCategories)
                .HasForeignKey(d => d.CounselorId)
                .HasConstraintName("FK__Counselor__couns__6383C8BA");

            entity.HasOne(d => d.SubCategory).WithMany(p => p.CounselorSubCategories)
                .HasForeignKey(d => d.SubCategoryId)
                .HasConstraintName("FK__Counselor__subCa__628FA481");
        });

        modelBuilder.Entity<Couple>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Couple__3213E83F1F6103D3");

            entity.ToTable("Couple");

            entity.Property(e => e.Id)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.BigFive)
                .HasMaxLength(255)
                .HasColumnName("bigFive");
            entity.Property(e => e.BigFiveDescription)
                .HasMaxLength(255)
                .HasColumnName("bigFiveDesc");
            entity.Property(e => e.BigFive1)
                .HasMaxLength(255)
                .HasColumnName("bigFive1");
            entity.Property(e => e.BigFive1Description)
                .HasMaxLength(255)
                .HasColumnName("bigFive1Desc");
            entity.Property(e => e.BigFiveResult)
                .HasMaxLength(255)
                .HasColumnName("bigFiveResult");
            entity.Property(e => e.CreateAt)
                .HasColumnType("datetime")
                .HasColumnName("createAt");
            entity.Property(e => e.CreateGender).HasColumnName("createGender");
            entity.Property(e => e.Disc)
                .HasMaxLength(255)
                .HasColumnName("disc");
            entity.Property(e => e.DiscDescription)
                .HasMaxLength(255)
                .HasColumnName("discDesc");
            entity.Property(e => e.Disc1)
                .HasMaxLength(255)
                .HasColumnName("disc1");
            entity.Property(e => e.Disc1Description)
                .HasMaxLength(255)
                .HasColumnName("disc1Desc");
            entity.Property(e => e.DiscResult)
                .HasMaxLength(255)
                .HasColumnName("discResult");
            entity.Property(e => e.Member)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("male");
            entity.Property(e => e.AccessCode)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("accessCode");
            entity.Property(e => e.IsVirtual).HasColumnName("isVirtual");
            entity.Property(e => e.LoveLanguage)
                .HasMaxLength(255)
                .HasColumnName("loveLanguage");
            entity.Property(e => e.LoveLanguageDescription)
                .HasMaxLength(255)
                .HasColumnName("loveLanguageDesc");
            entity.Property(e => e.LoveLanguage1)
                .HasMaxLength(255)
                .HasColumnName("loveLanguage1");
            entity.Property(e => e.LoveLanguage1Description)
                .HasMaxLength(255)
                .HasColumnName("loveLanguage1Desc");
            entity.Property(e => e.LoveLanguageResult)
                .HasMaxLength(255)
                .HasColumnName("loveLanguageResult");
            entity.Property(e => e.Member1)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("female");
            entity.Property(e => e.Mbti)
                .HasMaxLength(255)
                .HasColumnName("mbti");
            entity.Property(e => e.MbtiDescription)
                .HasMaxLength(255)
                .HasColumnName("mbtiDesc");
            entity.Property(e => e.Mbti1)
                .HasMaxLength(255)
                .HasColumnName("mbti1");
            entity.Property(e => e.Mbti1Description)
                .HasMaxLength(255)
                .HasColumnName("mbti1Desc");
            entity.Property(e => e.MbtiResult)
                .HasMaxLength(255)
                .HasColumnName("mbtiResult");
            entity.Property(e => e.Rec1)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("rec1");
            entity.Property(e => e.Rec2)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("rec2");
            entity.Property(e => e.Status).HasColumnName("status");
            entity.Property(e => e.VirtualDob)
                .HasColumnType("datetime")
                .HasColumnName("virtualDob");
            entity.Property(e => e.VirtualName)
                .HasMaxLength(255)
                .HasColumnName("virtualName");
            entity.Property(e => e.VirtualAvatar)
                .HasMaxLength(255)
                .HasColumnName("virtualAvatar");
            entity.Property(e => e.VirtualRelationship)
                .HasMaxLength(255)
                .HasColumnName("virtualRelationship");
            entity.Property(e => e.VirtualGender)
                .HasMaxLength(255)
                .HasColumnName("virtualGender");
            entity.Property(e => e.VirtualDescription)
                .HasColumnName("virtualDescription")
            .HasColumnType("nvarchar(max)");
            entity.HasOne(d => d.MemberNavigation).WithMany(p => p.CoupleMaleNavigations)
                .HasForeignKey(d => d.Member)
                .HasConstraintName("FK__Couple__female__74AE54BC");

            entity.HasOne(d => d.Member1Navigation).WithMany(p => p.CoupleFemaleNavigations)
                .HasForeignKey(d => d.Member1)
                .HasConstraintName("FK__Couple__male__73BA3083");
        });

        modelBuilder.Entity<Course>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Course__3213E83F35592F16");
            entity.ToTable("Course");
            entity.Property(e => e.Id)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.CreateAt)
                .HasColumnType("datetime")
                .HasColumnName("createAt");
            entity.Property(e => e.CreateBy)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("createBy");
            entity.Property(e => e.Description)
                .HasMaxLength(1000)
                .HasColumnName("description");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .HasColumnName("name");
            entity.Property(e => e.Reviews).HasColumnName("reviews");
            entity.Property(e => e.Price).HasColumnName("price");
            entity.Property(e => e.Rank).HasColumnName("rank");
            entity.Property(e => e.Rating).HasColumnName("rating");
            entity.Property(e => e.Status).HasColumnName("status");
            entity.Property(e => e.Thumble)
                .HasMaxLength(255)
                .HasColumnName("thumble");
            entity.Property(e => e.UpdateAt)
                .HasColumnType("datetime")
                .HasColumnName("updateAt");
        });

        modelBuilder.Entity<CourseSubCategory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Course_S__3213E83F46D92468");

            entity.ToTable("Course_SubCategory");

            entity.Property(e => e.Id)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.CategoryId)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("categoryId");
            entity.Property(e => e.CourseId)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("courseId");
            entity.Property(e => e.Status).HasColumnName("status");
            entity.Property(e => e.SubCategoryId)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("subCategoryId");


            entity.HasOne(d => d.Course).WithMany(p => p.CourseSubCategories)
                .HasForeignKey(d => d.CourseId)
                .HasConstraintName("FK__Course_Su__cours__5EBF139D");

            entity.HasOne(d => d.SubCategory).WithMany(p => p.CourseSubCategories)
                .HasForeignKey(d => d.SubCategoryId)
                .HasConstraintName("FK__Course_Su__subCa__5FB337D6");
        });

        modelBuilder.Entity<Deposit>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Deposit__3213E83FA64DC771");

            entity.ToTable("Deposit");

            entity.Property(e => e.Id)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.CancelReason)
                .HasMaxLength(255)
                .HasColumnName("cancelReason");
            entity.Property(e => e.CreateDate)
                .HasColumnType("datetime")
                .HasColumnName("createDate");
            entity.Property(e => e.Status).HasColumnName("status");
            entity.Property(e => e.Total).HasColumnName("total");
            entity.Property(e => e.WalletId)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("walletId");
            entity.Property(e => e.Stk)
        .HasMaxLength(100)
        .IsUnicode(false)
        .HasColumnName("stk");

            entity.Property(e => e.BankName)
                .HasMaxLength(255)
                .HasColumnName("bankName");

            entity.Property(e => e.AccountName)
                .HasMaxLength(255)
                .HasColumnName("accountName");

            entity.HasOne(d => d.Wallet).WithMany(p => p.Deposits)
                .HasForeignKey(d => d.WalletId)
                .HasConstraintName("FK__Deposit__walletI__0C85DE4D");
        });

        modelBuilder.Entity<EnrollCourse>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__EnrollCo__3213E83FDE5C924B");

            entity.ToTable("EnrollCourse");

            entity.Property(e => e.Id)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.CourseId)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("courseId");
            entity.Property(e => e.CreateDate)
                .HasColumnType("datetime")
                .HasColumnName("createDate");
            entity.Property(e => e.Feedback)
                .HasMaxLength(255)
                .HasColumnName("feedback");
            entity.Property(e => e.IsOpen).HasColumnName("isOpen");
            entity.Property(e => e.MemberId)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("memberId");
            entity.Property(e => e.Price).HasColumnName("price");
            entity.Property(e => e.Processing).HasColumnName("processing");
            entity.Property(e => e.Rating).HasColumnName("rating");
            entity.Property(e => e.Status).HasColumnName("status");

            entity.HasOne(d => d.Course).WithMany(p => p.EnrollCourses)
                .HasForeignKey(d => d.CourseId)
                .HasConstraintName("FK__EnrollCou__cours__6C190EBB");

            entity.HasOne(d => d.Member).WithMany(p => p.EnrollCourses)
                .HasForeignKey(d => d.MemberId)
                .HasConstraintName("FK__EnrollCou__membe__6D0D32F4");
        });

        modelBuilder.Entity<Lecture>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Lecture__3213E83FD30E3D97");

            entity.ToTable("Lecture");

            entity.Property(e => e.Id)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.ChapNum).HasColumnName("chapNum");
            entity.Property(e => e.CreateAt)
                .HasColumnType("datetime")
                .HasColumnName("create_at");
            entity.Property(e => e.Description)
                .HasMaxLength(1000)
                .HasColumnName("description");
            entity.Property(e => e.LectureMetadata)
                .HasColumnName("lecture_metadata")
            .HasColumnType("nvarchar(max)");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .HasColumnName("name");
            entity.Property(e => e.Status).HasColumnName("status");
            entity.Property(e => e.TimeVideo).HasColumnName("time_video");
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("type");
            entity.Property(e => e.VideoUrl)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("video_url");
        });

        modelBuilder.Entity<Member>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Member__3213E83F5CF28885");

            entity.ToTable("Member");

            entity.Property(e => e.Id)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.AccountId)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("accountId");
            entity.Property(e => e.BigFive)
                .HasMaxLength(255)
                .HasColumnName("bigFive");
            entity.Property(e => e.Disc)
                .HasMaxLength(255)
                .HasColumnName("disc");
            entity.Property(e => e.Dob)
                .HasColumnType("datetime")
                .HasColumnName("dob");
            entity.Property(e => e.Fullname)
                .HasMaxLength(255)
                .HasColumnName("fullname");
            entity.Property(e => e.Avatar)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("avatar");
            entity.Property(e => e.Gender)
                .HasMaxLength(50)
                .HasColumnName("gender");
            entity.Property(e => e.LoveLanguage)
                .HasMaxLength(255)
                .HasColumnName("loveLanguage");
            entity.Property(e => e.Mbti)
                .HasMaxLength(255)
                .HasColumnName("mbti");
            entity.Property(e => e.Phone)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("phone");
            entity.Property(e => e.Rec1)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("rec1");
            entity.Property(e => e.Rec2)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("rec2");
            entity.Property(e => e.Status).HasColumnName("status");

            entity.HasOne(d => d.Account).WithMany(p => p.Members)
                .HasForeignKey(d => d.AccountId)
                .HasConstraintName("FK__Member__accountI__5070F446");
        });

        modelBuilder.Entity<MemberMemberShip>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Member_M__3213E83F31FCAF56");

            entity.ToTable("Member_MemberShip");

            entity.Property(e => e.Id)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasColumnType("datetime")
                .HasColumnName("createDate");
            entity.Property(e => e.ExpiryDate)
                .HasColumnType("datetime")
                .HasColumnName("expiryDate");
            entity.Property(e => e.MemberId)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("memberId");
            entity.Property(e => e.MemberShipId)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("memberShipId");
            entity.Property(e => e.Price).HasColumnName("price");
            entity.Property(e => e.Status).HasColumnName("status");

            entity.HasOne(d => d.Member).WithMany(p => p.MemberMemberShips)
                .HasForeignKey(d => d.MemberId)
                .HasConstraintName("FK__Member_Me__membe__68487DD7");

            entity.HasOne(d => d.MemberShip).WithMany(p => p.MemberMemberShips)
                .HasForeignKey(d => d.MemberShipId)
                .HasConstraintName("FK__Member_Me__membe__693CA210");
        });

        modelBuilder.Entity<MemberShip>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__MemberSh__3213E83F15B1E962");

            entity.ToTable("MemberShip");

            entity.Property(e => e.Id)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("id");

            entity.Property(e => e.DiscountBooking).HasColumnName("discountBooking");
            entity.Property(e => e.DiscountCourse).HasColumnName("discountCourse");
            entity.Property(e => e.ExpiryDate).HasColumnName("expiryDate");
            entity.Property(e => e.MemberShipName)
                .HasMaxLength(255)
                .HasColumnName("memberShipName");
            entity.Property(e => e.Price).HasColumnName("price");
            entity.Property(e => e.Rank).HasColumnName("rank");
            entity.Property(e => e.Status).HasColumnName("status");
        });

        modelBuilder.Entity<Notification>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Notifica__3213E83F172C1C59");

            entity.ToTable("Notification");

            entity.Property(e => e.Id)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.CreateBy)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("createBy");
            entity.Property(e => e.CreateDate)
                .HasColumnType("datetime")
                .HasColumnName("createDate");
            entity.Property(e => e.DocNo)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("docNo");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasColumnName("description");
            entity.Property(e => e.IsRead).HasColumnName("isRead");
            entity.Property(e => e.IsOpen).HasColumnName("isOpen");
            entity.Property(e => e.NotiType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("notiType");
            entity.Property(e => e.Status).HasColumnName("status");
        });

        modelBuilder.Entity<PersonType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__PersonTy__3213E83F69C7BCEE");

            entity.ToTable("PersonType");

            entity.Property(e => e.Id)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.CategoryId)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("categoryId");
            entity.Property(e => e.CreateAt)
                .HasColumnType("datetime")
                .HasColumnName("createAt");
            entity.Property(e => e.Description)
                .HasMaxLength(1000)
                .HasColumnName("Descriptione");
            entity.Property(e => e.Image)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("image");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .HasColumnName("name");
            entity.Property(e => e.Status).HasColumnName("status");
            entity.Property(e => e.SurveyId)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("surveyId");
            entity.Property(e => e.Detail)
    .HasColumnName("detail")
    .HasColumnType("nvarchar(max)");
            entity.HasOne(d => d.Category).WithMany(p => p.PersonTypes)
                .HasForeignKey(d => d.CategoryId)
                .HasConstraintName("FK__PersonTyp__categ__5629CD9C");

            entity.HasOne(d => d.Survey).WithMany(p => p.PersonTypes)
                .HasForeignKey(d => d.SurveyId)
                .HasConstraintName("FK__PersonTyp__surve__571DF1D5");
        });

        modelBuilder.Entity<Post>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Post__3213E83F01CFAD81");

            entity.ToTable("Post");

            entity.Property(e => e.Id)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.CreateAt)
                .HasColumnType("datetime")
                .HasColumnName("createAt");
            entity.Property(e => e.CreateBy)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("createBy");
            entity.Property(e => e.Description)
                .HasColumnName("description")
                .HasColumnType("nvarchar(max)");
            entity.Property(e => e.Status).HasColumnName("status");
            entity.Property(e => e.Title)
                .HasMaxLength(1000)
                .HasColumnName("title");
            entity.Property(e => e.Image)
                .HasMaxLength(1000)
                .HasColumnName("image");
        });

        modelBuilder.Entity<Processing>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Processi__3213E83FB784D567");

            entity.ToTable("Processing");

            entity.Property(e => e.Id)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.ChapterId)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("chapterId");
            entity.Property(e => e.CreateDate)
                .HasColumnType("datetime")
                .HasColumnName("createDate");
            entity.Property(e => e.EnrollCourseId)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("enrollCourseId");
            entity.Property(e => e.Status).HasColumnName("status");

            entity.HasOne(d => d.Chapter).WithMany(p => p.Processings)
                .HasForeignKey(d => d.ChapterId)
                .HasConstraintName("FK__Processin__chapt__6FE99F9F");

            entity.HasOne(d => d.EnrollCourse).WithMany(p => p.Processings)
                .HasForeignKey(d => d.EnrollCourseId)
                .HasConstraintName("FK__Processin__enrol__70DDC3D8");
        });

        modelBuilder.Entity<Question>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Question__3213E83F7A1AA318");

            entity.ToTable("Question");

            entity.Property(e => e.Id)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.ChapNum).HasColumnName("chapNum");
            entity.Property(e => e.CreateAt)
                .HasColumnType("datetime")
                .HasColumnName("create_at");
            entity.Property(e => e.Description)
                .HasMaxLength(1000)
                .HasColumnName("description");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .HasColumnName("name");
            entity.Property(e => e.QuizId)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("quizId");
            entity.Property(e => e.Score).HasColumnName("score");
            entity.Property(e => e.Status).HasColumnName("status");
            entity.Property(e => e.SurveyId)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("surveyId");

            entity.HasOne(d => d.Quiz).WithMany(p => p.Questions)
                .HasForeignKey(d => d.QuizId)
                .HasConstraintName("FK__Question__quizId__49C3F6B7");

            entity.HasOne(d => d.Survey).WithMany(p => p.Questions)
                .HasForeignKey(d => d.SurveyId)
                .HasConstraintName("FK__Question__survey__4AB81AF0");
        });

        modelBuilder.Entity<Quiz>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Quiz__3213E83F84A99D6E");

            entity.ToTable("Quiz");

            entity.Property(e => e.Id)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Description)
                .HasMaxLength(1000)
                .HasColumnName("description");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .HasColumnName("name");
            entity.Property(e => e.QuizNum).HasColumnName("quizNum");
            entity.Property(e => e.Status).HasColumnName("status");
            entity.Property(e => e.TotalScore).HasColumnName("totalScore");
        });

        modelBuilder.Entity<ResultHistory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ResultHi__3213E83F7C5E8CFC");

            entity.ToTable("ResultHistory");

            entity.Property(e => e.Id)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.CreateAt)
                .HasColumnType("datetime")
                .HasColumnName("createAt");
            entity.Property(e => e.MemberId)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("memberId");
            entity.Property(e => e.Result)
                .HasMaxLength(255)
                .HasColumnName("result");
            entity.Property(e => e.Detail)
        .HasMaxLength(1000)
        .HasColumnName("detail");
            entity.Property(e => e.Description)
        .HasMaxLength(2000)
        .HasColumnName("description");
            entity.Property(e => e.Status).HasColumnName("status");
            entity.Property(e => e.Type)
                .HasMaxLength(255)
                .HasColumnName("type");

            entity.HasOne(d => d.Member).WithMany(p => p.ResultHistories)
                .HasForeignKey(d => d.MemberId)
                .HasConstraintName("FK__ResultHis__membe__05D8E0BE");
        });

        modelBuilder.Entity<ResultPersonType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ResultPe__3213E83F35C47E2A");

            entity.ToTable("ResultPersonType");

            entity.Property(e => e.Id)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.CategoryId)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("categoryId");
            entity.Property(e => e.CreateAt)
                .HasColumnType("datetime")
                .HasColumnName("createAt");
            entity.Property(e => e.Description)
                .HasMaxLength(1000)
                .HasColumnName("Descriptione");
            entity.Property(e => e.Image)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("image");
            entity.Property(e => e.PersonType2Id)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("personType2Id");
            entity.Property(e => e.PersonTypeId)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("personTypeId");
            entity.Property(e => e.Detail)
                .HasColumnName("detail")
                .HasColumnType("nvarchar(max)");
            entity.Property(e => e.Compatibility).HasColumnName("compatibility");
            entity.Property(e => e.Status).HasColumnName("status");
            entity.Property(e => e.SurveyId)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("surveyId");
            entity.Property(e => e.Weaknesses)
                .HasColumnName("Weaknesses")
                .HasColumnType("nvarchar(max)");

            entity.Property(e => e.StrongPoints)
                .HasColumnName("strongPoints")
                .HasColumnType("nvarchar(max)");

            entity.HasOne(d => d.Category).WithMany(p => p.ResultPersonTypes)
                .HasForeignKey(d => d.CategoryId)
                .HasConstraintName("FK__ResultPer__categ__59FA5E80");

            entity.HasOne(d => d.PersonType2).WithMany(p => p.ResultPersonTypePersonType2s)
                .HasForeignKey(d => d.PersonType2Id)
                .HasConstraintName("FK__ResultPer__perso__5BE2A6F2");

            entity.HasOne(d => d.PersonType).WithMany(p => p.ResultPersonTypePersonTypes)
                .HasForeignKey(d => d.PersonTypeId)
                .HasConstraintName("FK__ResultPer__perso__5AEE82B9");
        });

        modelBuilder.Entity<SubCategory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SubCateg__3213E83FBDFDC8DE");

            entity.ToTable("SubCategory");

            entity.Property(e => e.Id)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.CategoryId)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("categoryId");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .HasColumnName("name");
            entity.Property(e => e.Status).HasColumnName("status");

            entity.HasOne(d => d.Category).WithMany(p => p.SubCategories)
                .HasForeignKey(d => d.CategoryId)
                .HasConstraintName("FK__SubCatego__categ__3E52440B");
        });

        modelBuilder.Entity<Survey>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Survey__3213E83F22CB0FFE");

            entity.ToTable("Survey");

            entity.Property(e => e.Id)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.CreateAt)
                .HasColumnType("datetime")
                .HasColumnName("createAt");
            entity.Property(e => e.Description)
                .HasMaxLength(1000)
                .HasColumnName("Descriptione");
            entity.Property(e => e.Image)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("image");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .HasColumnName("name");
            entity.Property(e => e.Status).HasColumnName("status");
        });

        modelBuilder.Entity<SysTransaction>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SysTrans__3213E83FAC5245AC");

            entity.ToTable("SysTransaction");

            entity.Property(e => e.Id)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.CreateBy)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("createBy");
            entity.Property(e => e.CreateDate)
                .HasColumnType("datetime")
                .HasColumnName("createDate");
            entity.Property(e => e.DocNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("docNo");
            entity.Property(e => e.TransactionType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("transactionType");
        });

        modelBuilder.Entity<Wallet>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Wallet__3213E83F64FA72EF");

            entity.ToTable("Wallet");

            entity.Property(e => e.Id)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Remaining).HasColumnName("remaining");
            entity.Property(e => e.Status).HasColumnName("status");
        });

        modelBuilder.Entity<WorkSchedule>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__WorkSche__3213E83F0AF622ED");

            entity.ToTable("WorkSchedule");

            entity.Property(e => e.Id)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.CounselorId)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("counselorId");
            entity.Property(e => e.CreateAt)
                .HasColumnType("datetime")
                .HasColumnName("createAt");
            entity.Property(e => e.Description)
                .HasMaxLength(1000)
                .HasColumnName("description");
            entity.Property(e => e.EndTime)
                .HasColumnType("datetime")
                .HasColumnName("endTime");
            entity.Property(e => e.StartTime)
                .HasColumnType("datetime")
                .HasColumnName("startTime");
            entity.Property(e => e.Status).HasColumnName("status");
            entity.Property(e => e.WorkDate)
                .HasColumnType("datetime")
                .HasColumnName("workDate");

            entity.HasOne(d => d.Counselor).WithMany(p => p.WorkSchedules)
                .HasForeignKey(d => d.CounselorId)
                .HasConstraintName("FK__WorkSched__couns__778AC167");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}